//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfClient.FileTransferServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileTransferServiceReference.IFileTransferService", CallbackContract=typeof(WpfClient.FileTransferServiceReference.IFileTransferServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFileTransferService {
        
        // CODEGEN: Generating message contract since the wrapper name (UploadFileInfo) of message UploadFileInfo does not match the default value (UploadFile)
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileTransferService/UploadFile")]
        void UploadFile(WpfClient.FileTransferServiceReference.UploadFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileTransferService/UploadFile")]
        System.Threading.Tasks.Task UploadFileAsync(WpfClient.FileTransferServiceReference.UploadFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileTransferService/CancelUploadOperation")]
        void CancelUploadOperation(bool operationIsCanceled);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileTransferService/CancelUploadOperation")]
        System.Threading.Tasks.Task CancelUploadOperationAsync(bool operationIsCanceled);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileTransferService/SendProgress")]
        void SendProgress(int uploadedPart);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileStream;
        
        public UploadFileInfo() {
        }
        
        public UploadFileInfo(int Length, System.IO.Stream FileStream) {
            this.Length = Length;
            this.FileStream = FileStream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferServiceChannel : WpfClient.FileTransferServiceReference.IFileTransferService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileTransferServiceClient : System.ServiceModel.DuplexClientBase<WpfClient.FileTransferServiceReference.IFileTransferService>, WpfClient.FileTransferServiceReference.IFileTransferService {
        
        public FileTransferServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FileTransferServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FileTransferServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WpfClient.FileTransferServiceReference.IFileTransferService.UploadFile(WpfClient.FileTransferServiceReference.UploadFileInfo request) {
            base.Channel.UploadFile(request);
        }
        
        public void UploadFile(int Length, System.IO.Stream FileStream) {
            WpfClient.FileTransferServiceReference.UploadFileInfo inValue = new WpfClient.FileTransferServiceReference.UploadFileInfo();
            inValue.Length = Length;
            inValue.FileStream = FileStream;
            ((WpfClient.FileTransferServiceReference.IFileTransferService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task WpfClient.FileTransferServiceReference.IFileTransferService.UploadFileAsync(WpfClient.FileTransferServiceReference.UploadFileInfo request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task UploadFileAsync(int Length, System.IO.Stream FileStream) {
            WpfClient.FileTransferServiceReference.UploadFileInfo inValue = new WpfClient.FileTransferServiceReference.UploadFileInfo();
            inValue.Length = Length;
            inValue.FileStream = FileStream;
            return ((WpfClient.FileTransferServiceReference.IFileTransferService)(this)).UploadFileAsync(inValue);
        }
        
        public void CancelUploadOperation(bool operationIsCanceled) {
            base.Channel.CancelUploadOperation(operationIsCanceled);
        }
        
        public System.Threading.Tasks.Task CancelUploadOperationAsync(bool operationIsCanceled) {
            return base.Channel.CancelUploadOperationAsync(operationIsCanceled);
        }
    }
}
